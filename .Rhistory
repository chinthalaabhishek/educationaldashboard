# UI
ui <- dashboardPage(
dashboardHeader(title = "Education Performance Overview"),
dashboardSidebar(
sidebarMenu(
menuItem("Enter Student Data", tabName = "entry", icon = icon("edit")),
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Student Data", tabName = "data", icon = icon("table")),
menuItem("Performance Analysis", tabName = "analysis", icon = icon("chart-bar")),
menuItem("Download Data", tabName = "download", icon = icon("download"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidRow(
valueBoxOutput("totalStudents", width = 4),
valueBoxOutput("averageGPA", width = 4),
valueBoxOutput("distinctBranches", width = 4)
)
),
tabItem(tabName = "entry",
fluidRow(
box(title = "Enter Student Details", status = "primary", solidHeader = TRUE, width = 12,
textInput("hallticket", "Hall Ticket Number"),
textInput("name", "Name"),
textInput("college", "College"),
textInput("branch", "Branch"),
numericInput("gpa", "GPA", value = NULL, min = 0, max = 10, step = 0.1),
numericInput("class10", "10th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
numericInput("class12", "12th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
textInput("internship", "Internship"),
textInput("project", "Project"),
textInput("contact", "Contact"),
actionButton("addStudent", "Add Student", class = "btn-primary")
)
)
),
tabItem(tabName = "data",
fluidRow(
box(title = "Student Database", status = "info", width = 12,
DTOutput("studentTable"),
actionButton("deleteStudent", "Delete Selected Student", class = "btn-danger")
)
)
),
tabItem(tabName = "analysis",
fluidRow(
box(title = "GPA Distribution", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("gpaPlot")),
box(title = "Branch-wise GPA Analysis", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("branchGpaPlot"))
),
fluidRow(
box(title = "10th vs 12th Percentage", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("classPerformancePlot"))
)
),
tabItem(tabName = "download",
fluidRow(
box(title = "Download Student Data", status = "success", solidHeader = TRUE, width = 12,
downloadButton("downloadData", "Download as CSV"))
)
)
)
)
)
# Server
server <- function(input, output, session) {
load_data <- reactive({
dbReadTable(db, "students")
})
observeEvent(input$addStudent, {
dbExecute(db, "INSERT OR REPLACE INTO students VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
params = list(input$hallticket, input$name, input$college, input$branch, input$gpa,
input$class10, input$class12, input$internship, input$project, input$contact))
session$reload()
})
output$studentTable <- renderDT({
datatable(load_data(), selection = "single", editable = TRUE)
})
observeEvent(input$studentTable_cell_edit, {
info <- input$studentTable_cell_edit
data <- load_data()
row <- info$row
col <- info$col + 1
value <- info$value
column_name <- colnames(data)[col]
hallticket <- data$HallTicket[row]
dbExecute(db, paste("UPDATE students SET", column_name, "= ? WHERE HallTicket = ?"),
params = list(value, hallticket))
})
observeEvent(input$deleteStudent, {
selected <- input$studentTable_rows_selected
if (!is.null(selected)) {
data <- load_data()
dbExecute(db, "DELETE FROM students WHERE HallTicket = ?", params = list(data$HallTicket[selected]))
session$reload()
}
})
output$gpaPlot <- renderPlot({
ggplot(load_data(), aes(x = GPA)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "GPA Distribution", x = "GPA", y = "Count")
})
output$branchGpaPlot <- renderPlot({
ggplot(load_data(), aes(x = Branch, y = GPA, fill = Branch)) +
geom_boxplot() +
labs(title = "Branch-wise GPA Analysis", x = "Branch", y = "GPA")
})
output$classPerformancePlot <- renderPlot({
ggplot(load_data(), aes(x = Class10, y = Class12)) +
geom_point(color = "red") +
geom_smooth(method = "lm", col = "blue", na.rm = TRUE) +
labs(title = "10th vs 12th Percentage", x = "10th Percentage", y = "12th Percentage")
})
output$totalStudents <- renderValueBox({
valueBox(nrow(load_data()), "Total Students", icon = icon("users"), color = "blue")
})
output$averageGPA <- renderValueBox({
avg_gpa <- mean(load_data()$GPA, na.rm = TRUE)
valueBox(round(avg_gpa, 2), "Average GPA", icon = icon("chart-line"), color = "green")
})
output$distinctBranches <- renderValueBox({
branches <- length(unique(load_data()$Branch))
valueBox(branches, "Distinct Branches", icon = icon("university"), color = "purple")
})
output$downloadData <- downloadHandler(
filename = function() { "student_data.csv" },
content = function(file) {
write_csv(load_data(), file)
}
)
}
# Run the app
shinyApp(ui = ui, server = server)
# Create SQLite database connection
db <- dbConnect(RSQLite::SQLite(), "student_data.db")
# Create table if not exists
dbExecute(db, "CREATE TABLE IF NOT EXISTS students (
HallTicket TEXT PRIMARY KEY,
Name TEXT,
College TEXT,
Branch TEXT,
GPA REAL,
Class10 REAL,
Class12 REAL,
Internship TEXT,
Project TEXT,
Contact TEXT
)")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Education Performance Overview"),
dashboardSidebar(
sidebarMenu(
menuItem("Enter Student Data", tabName = "entry", icon = icon("edit")),
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Student Data", tabName = "data", icon = icon("table")),
menuItem("Performance Analysis", tabName = "analysis", icon = icon("chart-bar")),
menuItem("Download Data", tabName = "download", icon = icon("download"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidRow(
valueBoxOutput("totalStudents", width = 4),
valueBoxOutput("averageGPA", width = 4),
valueBoxOutput("distinctBranches", width = 4)
)
),
tabItem(tabName = "entry",
fluidRow(
box(title = "Enter Student Details", status = "primary", solidHeader = TRUE, width = 12,
textInput("hallticket", "Hall Ticket Number"),
textInput("name", "Name"),
textInput("college", "College"),
textInput("branch", "Branch"),
numericInput("gpa", "GPA", value = NULL, min = 0, max = 10, step = 0.1),
numericInput("class10", "10th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
numericInput("class12", "12th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
textInput("internship", "Internship"),
textInput("project", "Project"),
textInput("contact", "Contact"),
actionButton("addStudent", "Add Student", class = "btn-primary")
)
)
),
tabItem(tabName = "data",
fluidRow(
box(title = "Student Database", status = "info", width = 12,
DTOutput("studentTable"),
actionButton("deleteStudent", "Delete Selected Student", class = "btn-danger")
)
)
),
tabItem(tabName = "analysis",
fluidRow(
box(title = "GPA Distribution", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("gpaPlot")),
box(title = "Branch-wise GPA Analysis", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("branchGpaPlot"))
),
fluidRow(
box(title = "10th vs 12th Percentage", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("classPerformancePlot"))
)
),
tabItem(tabName = "download",
fluidRow(
box(title = "Download Student Data", status = "success", solidHeader = TRUE, width = 12,
downloadButton("downloadData", "Download as CSV"))
)
)
)
)
)
# Server
server <- function(input, output, session) {
load_data <- reactive({
dbReadTable(db, "students")
})
observeEvent(input$addStudent, {
dbExecute(db, "INSERT OR REPLACE INTO students VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
params = list(input$hallticket, input$name, input$college, input$branch, input$gpa,
input$class10, input$class12, input$internship, input$project, input$contact))
session$reload()
})
output$studentTable <- renderDT({
datatable(load_data(), selection = "single", editable = TRUE)
})
observeEvent(input$studentTable_cell_edit, {
info <- input$studentTable_cell_edit
data <- load_data()
row <- info$row
col <- info$col + 1
value <- info$value
column_name <- colnames(data)[col]
hallticket <- data$HallTicket[row]
dbExecute(db, paste("UPDATE students SET", column_name, "= ? WHERE HallTicket = ?"),
params = list(value, hallticket))
})
observeEvent(input$deleteStudent, {
selected <- input$studentTable_rows_selected
if (!is.null(selected)) {
data <- load_data()
dbExecute(db, "DELETE FROM students WHERE HallTicket = ?", params = list(data$HallTicket[selected]))
session$reload()
}
})
output$gpaPlot <- renderPlot({
ggplot(load_data(), aes(x = GPA)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "GPA Distribution", x = "GPA", y = "Count")
})
output$branchGpaPlot <- renderPlot({
ggplot(load_data(), aes(x = Branch, y = GPA, fill = Branch)) +
geom_boxplot() +
labs(title = "Branch-wise GPA Analysis", x = "Branch", y = "GPA")
})
output$classPerformancePlot <- renderPlot({
ggplot(load_data(), aes(x = Class10, y = Class12)) +
geom_point(color = "red") +
geom_smooth(method = "lm", col = "blue", na.rm = TRUE) +
labs(title = "10th vs 12th Percentage", x = "10th Percentage", y = "12th Percentage")
})
output$totalStudents <- renderValueBox({
valueBox(nrow(load_data()), "Total Students", icon = icon("users"), color = "blue")
})
output$averageGPA <- renderValueBox({
avg_gpa <- mean(load_data()$GPA, na.rm = TRUE)
valueBox(round(avg_gpa, 2), "Average GPA", icon = icon("chart-line"), color = "green")
})
output$distinctBranches <- renderValueBox({
branches <- length(unique(load_data()$Branch))
valueBox(branches, "Distinct Branches", icon = icon("university"), color = "purple")
})
output$downloadData <- downloadHandler(
filename = function() { "student_data.csv" },
content = function(file) {
write_csv(load_data(), file)
}
)
}
# Run the app
shinyApp(ui = ui, server = server)
# Create SQLite database connection
db <- dbConnect(RSQLite::SQLite(), "student_data.db")
# Create table if not exists
dbExecute(db, "CREATE TABLE IF NOT EXISTS students (
HallTicket TEXT PRIMARY KEY,
Name TEXT,
College TEXT,
Branch TEXT,
GPA REAL,
Class10 REAL,
Class12 REAL,
Internship TEXT,
Project TEXT,
Contact TEXT
)")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Education Performance Overview"),
dashboardSidebar(
sidebarMenu(
menuItem("Enter Student Data", tabName = "entry", icon = icon("edit")),
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Student Data", tabName = "data", icon = icon("table")),
menuItem("Update Student Data", tabName = "update", icon = icon("edit")),
menuItem("Performance Analysis", tabName = "analysis", icon = icon("chart-bar")),
menuItem("Download Data", tabName = "download", icon = icon("download"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidRow(
valueBoxOutput("totalStudents", width = 4),
valueBoxOutput("averageGPA", width = 4),
valueBoxOutput("distinctBranches", width = 4)
)
),
tabItem(tabName = "entry",
fluidRow(
box(title = "Enter Student Details", status = "primary", solidHeader = TRUE, width = 12,
textInput("hallticket", "Hall Ticket Number"),
textInput("name", "Name"),
textInput("college", "College"),
textInput("branch", "Branch"),
numericInput("gpa", "GPA", value = NULL, min = 0, max = 10, step = 0.1),
numericInput("class10", "10th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
numericInput("class12", "12th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
textInput("internship", "Internship"),
textInput("project", "Project"),
textInput("contact", "Contact"),
actionButton("addStudent", "Add Student", class = "btn-primary")
)
)
),
tabItem(tabName = "data",
fluidRow(
box(title = "Student Database", status = "info", width = 12,
DTOutput("studentTable"),
actionButton("deleteStudent", "Delete Selected Student", class = "btn-danger")
)
)
),
tabItem(tabName = "update",
fluidRow(
box(title = "Update Student Details", status = "warning", solidHeader = TRUE, width = 12,
textInput("updateHallticket", "Hall Ticket Number (Existing)"),
textInput("updateName", "Name"),
textInput("updateCollege", "College"),
textInput("updateBranch", "Branch"),
numericInput("updateGPA", "GPA", value = NULL, min = 0, max = 10, step = 0.1),
numericInput("updateClass10", "10th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
numericInput("updateClass12", "12th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
textInput("updateInternship", "Internship"),
textInput("updateProject", "Project"),
textInput("updateContact", "Contact"),
actionButton("updateStudent", "Update Student", class = "btn-warning")
)
)
),
tabItem(tabName = "analysis",
fluidRow(
box(title = "GPA Distribution", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("gpaPlot")),
box(title = "Branch-wise GPA Analysis", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("branchGpaPlot"))
),
fluidRow(
box(title = "10th vs 12th Percentage", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("classPerformancePlot"))
)
),
tabItem(tabName = "download",
fluidRow(
box(title = "Download Student Data", status = "success", solidHeader = TRUE, width = 12,
downloadButton("downloadData", "Download as CSV"))
)
)
)
)
)
# Server
server <- function(input, output, session) {
observeEvent(input$updateStudent, {
dbExecute(db, "UPDATE students SET Name = ?, College = ?, Branch = ?, GPA = ?, Class10 = ?, Class12 = ?, Internship = ?, Project = ?, Contact = ? WHERE HallTicket = ?",
params = list(input$updateName, input$updateCollege, input$updateBranch, input$updateGPA,
input$updateClass10, input$updateClass12, input$updateInternship, input$updateProject,
input$updateContact, input$updateHallticket))
session$reload()
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Create SQLite database connection
db <- dbConnect(RSQLite::SQLite(), "student_data.db")
# Create table if not exists
dbExecute(db, "CREATE TABLE IF NOT EXISTS students (
HallTicket TEXT PRIMARY KEY,
Name TEXT,
College TEXT,
Branch TEXT,
GPA REAL,
Class10 REAL,
Class12 REAL,
Internship TEXT,
Project TEXT,
Contact TEXT
)")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Education Performance Overview"),
dashboardSidebar(
sidebarMenu(
menuItem("Enter Student Data", tabName = "entry", icon = icon("edit")),
menuItem("Overview", tabName = "overview", icon = icon("dashboard")),
menuItem("Student Data", tabName = "data", icon = icon("table")),
menuItem("Update Student Data", tabName = "update", icon = icon("edit")),
menuItem("Performance Analysis", tabName = "analysis", icon = icon("chart-bar")),
menuItem("Download Data", tabName = "download", icon = icon("download"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "overview",
fluidRow(
valueBoxOutput("totalStudents", width = 4),
valueBoxOutput("averageGPA", width = 4),
valueBoxOutput("distinctBranches", width = 4)
)
),
tabItem(tabName = "entry",
fluidRow(
box(title = "Enter Student Details", status = "primary", solidHeader = TRUE, width = 12,
textInput("hallticket", "Hall Ticket Number"),
textInput("name", "Name"),
textInput("college", "College"),
textInput("branch", "Branch"),
numericInput("gpa", "GPA", value = NULL, min = 0, max = 10, step = 0.1),
numericInput("class10", "10th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
numericInput("class12", "12th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
textInput("internship", "Internship"),
textInput("project", "Project"),
textInput("contact", "Contact"),
actionButton("addStudent", "Add Student", class = "btn-primary")
)
)
),
tabItem(tabName = "data",
fluidRow(
box(title = "Student Database", status = "info", width = 12,
DTOutput("studentTable"),
actionButton("deleteStudent", "Delete Selected Student", class = "btn-danger")
)
)
),
tabItem(tabName = "update",
fluidRow(
box(title = "Update Student Details", status = "warning", solidHeader = TRUE, width = 12,
textInput("updateHallticket", "Hall Ticket Number (Existing)"),
textInput("updateName", "Name"),
textInput("updateCollege", "College"),
textInput("updateBranch", "Branch"),
numericInput("updateGPA", "GPA", value = NULL, min = 0, max = 10, step = 0.1),
numericInput("updateClass10", "10th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
numericInput("updateClass12", "12th Percentage", value = NULL, min = 0, max = 100, step = 0.1),
textInput("updateInternship", "Internship"),
textInput("updateProject", "Project"),
textInput("updateContact", "Contact"),
actionButton("updateStudent", "Update Student", class = "btn-warning")
)
)
),
tabItem(tabName = "analysis",
fluidRow(
box(title = "GPA Distribution", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("gpaPlot")),
box(title = "Branch-wise GPA Analysis", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("branchGpaPlot"))
),
fluidRow(
box(title = "10th vs 12th Percentage", status = "primary", solidHeader = TRUE, width = 6,
plotOutput("classPerformancePlot"))
)
),
tabItem(tabName = "download",
fluidRow(
box(title = "Download Student Data", status = "success", solidHeader = TRUE, width = 12,
downloadButton("downloadData", "Download as CSV"))
)
)
)
)
)
# Server
server <- function(input, output, session) {
observeEvent(input$updateStudent, {
dbExecute(db, "UPDATE students SET Name = ?, College = ?, Branch = ?, GPA = ?, Class10 = ?, Class12 = ?, Internship = ?, Project = ?, Contact = ? WHERE HallTicket = ?",
params = list(input$updateName, input$updateCollege, input$updateBranch, input$updateGPA,
input$updateClass10, input$updateClass12, input$updateInternship, input$updateProject,
input$updateContact, input$updateHallticket))
session$reload()
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny); runApp('C:/Users/chint/OneDrive/Desktop/R project.R')
